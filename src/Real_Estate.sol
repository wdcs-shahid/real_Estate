//SPDX-License-Identifier:MIT

pragma solidity ^0.8.0;
/// @title A real estate based contract
///@author Shahidkhan
///@notice You can use these for basic real estate fund raising

import "lib/openzeppelin-contracts/contracts/token/ERC1155/ERC1155.sol";
import "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol";

contract Real_estate is ERC1155("") {
    uint256 private key = 0;
    IERC20 public usdt;

    struct Investor {
        uint256 amount;
        uint256 timestamp;
    }

    struct Property {
        address propertyOwner;
        uint256 totalPropertyValue;
        uint256 askUSDT;
        uint256 recievedUSDT;
        string propertyAddress;
        uint256 addreward;
        uint256 investorCount;
        mapping(address => Investor) investors;
    }

    constructor(address USDT) {
        usdt = IERC20(USDT); //usdt.balanceOf , usdt.allowance , usdt.transferFrom
    }

    mapping(uint256 => Property) public properties;
    /// @notice storing Property details when property owners list their property
    /// @dev ERC1155 tokens will mint to property owner as equal to requested amount for investment
    /// @param _totalPropertyValue the total value of property in USDT
    /// @param  _askUSDT  the amount which propertyOwner wants in USDT
    /// @param _propertyAddress the address of property where it is located
    function registerProperty(
        uint256 _totalPropertyValue,
        uint256 _askUSDT,
        string memory _propertyAddress
    ) external {
        require(
            _totalPropertyValue >= _askUSDT,
            "You can not ask more fund than your property value"
        );
        _mint(msg.sender, key, _askUSDT, "");
        properties[key].propertyOwner = msg.sender;
        properties[key].totalPropertyValue = _totalPropertyValue;
        properties[key].askUSDT = _askUSDT;
        properties[key].propertyAddress = _propertyAddress;
        key++;
    }

    /// @notice storing an investor details when they invest in particular property
    /// @dev the amount in USDT which an investor invests for property, the same amount of ERC1155 tokens will be transfered to investor from propertyOwner
    /// @param id the key of property in which an investor wants to invest
    /// @param _amount the amount which an investor wants to invest in USDT
    function invest(uint id, uint256 _amount) external {
        require(usdt.balanceOf(msg.sender) >= _amount, "Insufficient Balance");

        require(
            usdt.allowance(msg.sender, address(this)) >= _amount,
            "Insufficient Allowance"
        );
        Property storage land = properties[id];
        require(land.askUSDT >= _amount, "Required Investment Amount is Less");
        land.investors[msg.sender] = Investor({
            amount: _amount,
            timestamp: block.timestamp
        });
        land.askUSDT -= _amount;
        land.recievedUSDT += _amount;
        usdt.transferFrom(msg.sender, properties[id].propertyOwner, _amount);
        _safeTransferFrom(land.propertyOwner, msg.sender, id, _amount, "");
        properties[id].investorCount++;
    }

    /// @notice adding rewards in USDT by propertyOwner for their property in USDT which they are generated through invested USDT
    /// @param _key the key of property for adding reward to that property's investors
    /// @param _addReward the amount in USDT which propertyOwner generated through invested USDT
    function addReward(uint _key, uint _addReward) external {
        Property storage getProperty = properties[_key];
        require(
            getProperty.propertyOwner == msg.sender,
            "Only Owner Can Add Rewards"
        );
        require(
            usdt.balanceOf(msg.sender) >= _addReward,
            "Insufficient Balance"
        );
        require(
            usdt.allowance(msg.sender, address(this)) >= _addReward,
            "Insufficient Allowance"
        );
        usdt.transferFrom(msg.sender, address(this), _addReward);
        getProperty.addreward = _addReward;
    }

    /// @notice getting reward by an investors which is generated by their invested USDT
    /// @dev investors can only get their rewards only after every 30 days after investing USDT
    /// @param _key the key of property in which investors has invested their USDT
    function getReward(uint _key) external {
        Property storage rewardInfo = properties[_key];
        Investor storage getInvestor = rewardInfo.investors[msg.sender];

        require(getInvestor.amount > 0, "Investor not found");
        require(
            getInvestor.timestamp + 30 days <= block.timestamp,
            "You can only withdraw after 30 days of your investment"
        );
        getInvestor.timestamp = block.timestamp;
        uint reward = (rewardInfo.addreward * getInvestor.amount) /
            (rewardInfo.recievedUSDT + rewardInfo.askUSDT);
        usdt.transfer(msg.sender, reward);
    }
}
